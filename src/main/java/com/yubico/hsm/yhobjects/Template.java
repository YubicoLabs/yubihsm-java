package com.yubico.hsm.yhobjects;

import com.yubico.hsm.YHSession;
import com.yubico.hsm.exceptions.*;
import com.yubico.hsm.internal.util.Utils;
import com.yubico.hsm.yhconcepts.Algorithm;
import com.yubico.hsm.yhconcepts.Capability;
import com.yubico.hsm.yhconcepts.Command;
import com.yubico.hsm.yhconcepts.Type;
import lombok.NonNull;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import java.nio.ByteBuffer;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Logger;

/**
 * Class representing a Template object on the YubiHSM. A Template Object is a binary template used for example to validate SSH certificate requests
 */
public class Template extends YHObject {
    private static Logger log = Logger.getLogger(Template.class.getName());

    public static final Type TYPE = Type.TYPE_TEMPLATE;
    public static final int MAX_TEMPLATE_DATA_LENGTH = 1968;

    /**
     * Creates a Template object
     *
     * @param id        The object ID of this object
     */
    public Template(final short id) {
        setId(id);
        setType(TYPE);
    }

    public static boolean isTemplateAlgorithm(final Algorithm algorithm) {
        if (algorithm == null) {
            return false;
        }
        return algorithm.equals(Algorithm.TEMPLATE_SSH);
    }

    /**
     * Imports a Template object into the YubiHSM
     *
     * @param session      An authenticated session to communicate with the device over
     * @param id           The ID of the Template object. 0 if the ID is to be generated by the device
     * @param label        The Template object label
     * @param domains      The domains where the Template object will be operating within
     * @param capabilities The capabilities of the Template object
     * @param algorithm    The algorithm of the Template object
     * @param templateData The Template object to import
     * @return ID of the Template object on the device
     * @throws NoSuchAlgorithmException           If the encryption/decryption fails
     * @throws YHDeviceException                  If the device returns an error
     * @throws YHInvalidResponseException         If the response from the device cannot be parsed
     * @throws YHConnectionException              If the connection to the device fails
     * @throws InvalidKeyException                If the encryption/decryption fails
     * @throws YHAuthenticationException          If the session authentication fails
     * @throws NoSuchPaddingException             If the encryption/decryption fails
     * @throws InvalidAlgorithmParameterException If the encryption/decryption fails
     * @throws BadPaddingException                If the encryption/decryption fails
     * @throws IllegalBlockSizeException          If the encryption/decryption fails
     * @throws UnsupportedAlgorithmException      If the specified key algorithm is not an RSA algorithm
     */
    public static short importTemplate(@NonNull final YHSession session, short id, final String label, @NonNull final List<Integer> domains,
                                       final List<Capability> capabilities, @NonNull final Algorithm algorithm, @NonNull final byte[] templateData)
            throws NoSuchAlgorithmException, YHDeviceException, YHInvalidResponseException, YHConnectionException, InvalidKeyException,
                   YHAuthenticationException, NoSuchPaddingException, InvalidAlgorithmParameterException, BadPaddingException,
                   IllegalBlockSizeException, UnsupportedAlgorithmException {
        verifyParametersForNewTemplate(domains, algorithm, templateData);

        ByteBuffer bb = ByteBuffer.allocate(
                OBJECT_ID_SIZE + OBJECT_LABEL_SIZE + OBJECT_DOMAINS_SIZE + OBJECT_CAPABILITIES_SIZE + OBJECT_ALGORITHM_SIZE + templateData.length);
        bb.putShort(id);
        bb.put(Arrays.copyOf(Utils.getLabel(label).getBytes(), OBJECT_LABEL_SIZE));
        bb.putShort(Utils.getShortFromList(domains));
        bb.putLong(Utils.getLongFromCapabilities(capabilities));
        bb.put(algorithm.getId());
        bb.put(templateData);

        byte[] resp = session.sendSecureCmd(Command.PUT_TEMPLATE, bb.array());
        if (resp.length != OBJECT_ID_SIZE) {
            throw new YHInvalidResponseException(
                    "Response to " + Command.PUT_TEMPLATE.getName() + " command expected to contains " + OBJECT_ID_SIZE + " bytes, but was " +
                    resp.length + " bytes instead");
        }

        bb = ByteBuffer.wrap(resp);
        id = bb.getShort();

        log.info("Imported Template object with ID 0x" + Integer.toHexString(id) + " and algorithm " + algorithm.toString());
        return id;
    }

    private static void verifyParametersForNewTemplate(@NonNull final List<Integer> domains, @NonNull final Algorithm algorithm,
                                                       @NonNull final byte[] templateData)
            throws UnsupportedAlgorithmException {
        if (domains.isEmpty()) {
            throw new IllegalArgumentException("Domains parameter cannot be null or empty");
        }
        if (!isTemplateAlgorithm(algorithm)) {
            throw new UnsupportedAlgorithmException("Algorithm " + algorithm.toString() + " is not a supported Template object algorithm");
        }
        if (templateData.length == 0) {
            throw new IllegalArgumentException("Template object cannot be empty");
        }
        if (templateData.length > MAX_TEMPLATE_DATA_LENGTH) {
            throw new IllegalArgumentException("Template object is too long");
        }
    }

    /**
     * Retrieves a Template object from the YubiHSM.
     *
     * @param session An authenticated session to communicate with the device over
     * @return This Template object as a byte array
     * @throws NoSuchAlgorithmException           If the encryption/decryption fails
     * @throws YHDeviceException                  If the device returns an error
     * @throws YHInvalidResponseException         If the response from the device cannot be parsed
     * @throws YHConnectionException              If the connection to the device fails
     * @throws InvalidKeyException                If the encryption/decryption fails
     * @throws YHAuthenticationException          If the session authentication fails
     * @throws NoSuchPaddingException             If the encryption/decryption fails
     * @throws InvalidAlgorithmParameterException If the encryption/decryption fails
     * @throws BadPaddingException                If the encryption/decryption fails
     * @throws IllegalBlockSizeException          If the encryption/decryption fails
     */
    public byte[] getTemplate(@NonNull final YHSession session)
            throws NoSuchPaddingException, NoSuchAlgorithmException, YHConnectionException, InvalidKeyException, YHDeviceException,
                   InvalidAlgorithmParameterException, YHAuthenticationException, YHInvalidResponseException, BadPaddingException,
                   IllegalBlockSizeException {
        ByteBuffer bb = ByteBuffer.allocate(OBJECT_ID_SIZE);
        bb.putShort(getId());

        byte[] resp = session.sendSecureCmd(Command.GET_TEMPLATE, bb.array());
        log.info("Returned Template object with ID 0x" + Integer.toHexString(getId()));
        return resp;
    }


}
